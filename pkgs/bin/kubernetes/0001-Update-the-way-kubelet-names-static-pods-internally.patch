From 5969e05ed34f3cf8980f29f187bad831d0e28eff Mon Sep 17 00:00:00 2001
From: Emily Shepherd <emily@redcoat.dev>
Date: Thu, 30 Nov 2023 21:28:53 +0000
Subject: [PATCH] Update the way kubelet names static pods internally

Previously, static pods had their names appended with the node name upon
creation to avoid collisions when creating mirror pods in the
api-server. This logic makes sense, however it was causing static pods
to be restarted whenever the hostname changed which is undesirable.

This change updates kubelet to continue to refer static pods _locally_
using their original, unappended, name. The node name is added only when
speaking with the api server.
---
 pkg/kubelet/config/common.go         |  5 +----
 pkg/kubelet/container/runtime.go     | 19 ++++++++++++++++++-
 pkg/kubelet/pod/mirror_client.go     |  7 +++++++
 pkg/kubelet/pod/pod_manager.go       | 14 +++++++++++---
 pkg/kubelet/status/status_manager.go |  3 +++
 pkg/kubelet/types/pod_update.go      |  2 ++
 6 files changed, 42 insertions(+), 8 deletions(-)

diff --git a/pkg/kubelet/config/common.go b/pkg/kubelet/config/common.go
index 7dade01b9c3..d7f4cdbf247 100644
--- a/pkg/kubelet/config/common.go
+++ b/pkg/kubelet/config/common.go
@@ -60,7 +60,6 @@ func applyDefaults(pod *api.Pod, source string, isFile bool, nodeName types.Node
 		// DeepHashObject resets the hash, so we should write the pod source
 		// information AFTER it.
 		if isFile {
-			fmt.Fprintf(hasher, "host:%s", nodeName)
 			fmt.Fprintf(hasher, "file:%s", source)
 		} else {
 			fmt.Fprintf(hasher, "url:%s", source)
@@ -69,9 +68,6 @@ func applyDefaults(pod *api.Pod, source string, isFile bool, nodeName types.Node
 		klog.V(5).InfoS("Generated UID", "pod", klog.KObj(pod), "podUID", pod.UID, "source", source)
 	}
 
-	pod.Name = generatePodName(pod.Name, nodeName)
-	klog.V(5).InfoS("Generated pod name", "pod", klog.KObj(pod), "podUID", pod.UID, "source", source)
-
 	if pod.Namespace == "" {
 		pod.Namespace = metav1.NamespaceDefault
 	}
@@ -85,6 +81,7 @@ func applyDefaults(pod *api.Pod, source string, isFile bool, nodeName types.Node
 	}
 	// The generated UID is the hash of the file.
 	pod.Annotations[kubetypes.ConfigHashAnnotationKey] = string(pod.UID)
+	pod.Annotations[kubetypes.ConfigApiName] = generatePodName(pod.Name, nodeName)
 
 	if isFile {
 		// Applying the default Taint tolerations to static pods,
diff --git a/pkg/kubelet/container/runtime.go b/pkg/kubelet/container/runtime.go
index 8a154f272c8..869b0646111 100644
--- a/pkg/kubelet/container/runtime.go
+++ b/pkg/kubelet/container/runtime.go
@@ -34,6 +34,7 @@ import (
 	runtimeapi "k8s.io/cri-api/pkg/apis/runtime/v1"
 	"k8s.io/klog/v2"
 	"k8s.io/kubernetes/pkg/volume"
+	kubetypes "k8s.io/kubernetes/pkg/kubelet/types"
 )
 
 // Version interface allow to consume the runtime versions - compare and format to string.
@@ -652,11 +653,27 @@ func (p *Pod) IsEmpty() bool {
 
 // GetPodFullName returns a name that uniquely identifies a pod.
 func GetPodFullName(pod *v1.Pod) string {
+	name, ok := pod.Annotations[kubetypes.ConfigMirrorLocalName]
+	if !ok {
+		name = pod.Name
+	}
+	// Use underscore as the delimiter because it is not allowed in pod name
+	// (DNS subdomain format), while allowed in the container name format.
+	return name + "_" + pod.Namespace
+}
+
+// GetPodFullName returns a name that uniquely identifies a pod.
+func GetPodFullApiName(pod *v1.Pod) string {
+	name, ok := pod.Annotations[kubetypes.ConfigApiName]
+	if !ok {
+		name = pod.Name
+	}
 	// Use underscore as the delimiter because it is not allowed in pod name
 	// (DNS subdomain format), while allowed in the container name format.
-	return pod.Name + "_" + pod.Namespace
+	return name + "_" + pod.Namespace
 }
 
+
 // BuildPodFullName builds the pod full name from pod name and namespace.
 func BuildPodFullName(name, namespace string) string {
 	return name + "_" + namespace
diff --git a/pkg/kubelet/pod/mirror_client.go b/pkg/kubelet/pod/mirror_client.go
index 22ea62b1a31..b7eaadce0f0 100644
--- a/pkg/kubelet/pod/mirror_client.go
+++ b/pkg/kubelet/pod/mirror_client.go
@@ -66,6 +66,10 @@ func NewBasicMirrorClient(apiserverClient clientset.Interface, nodeName string,
 	}
 }
 
+func (mc *basicMirrorClient) makeApiName(name string) string {
+	return name + "-" + mc.nodeName
+}
+
 func (mc *basicMirrorClient) CreateMirrorPod(pod *v1.Pod) error {
 	if mc.apiserverClient == nil {
 		return nil
@@ -78,7 +82,9 @@ func (mc *basicMirrorClient) CreateMirrorPod(pod *v1.Pod) error {
 		copyPod.Annotations[k] = v
 	}
 	hash := getPodHash(pod)
+	copyPod.Name = mc.makeApiName(pod.Name)
 	copyPod.Annotations[kubetypes.ConfigMirrorAnnotationKey] = hash
+	copyPod.Annotations[kubetypes.ConfigMirrorLocalName] = pod.Name
 
 	// With the MirrorPodNodeRestriction feature, mirror pods are required to have an owner reference
 	// to the owning node.
@@ -118,6 +124,7 @@ func (mc *basicMirrorClient) DeleteMirrorPod(podFullName string, uid *types.UID)
 		return false, nil
 	}
 	name, namespace, err := kubecontainer.ParsePodFullName(podFullName)
+	name = mc.makeApiName(name)
 	if err != nil {
 		klog.ErrorS(err, "Failed to parse a pod full name", "podFullName", podFullName)
 		return false, err
diff --git a/pkg/kubelet/pod/pod_manager.go b/pkg/kubelet/pod/pod_manager.go
index 69457e6c983..dd4f13ecadf 100644
--- a/pkg/kubelet/pod/pod_manager.go
+++ b/pkg/kubelet/pod/pod_manager.go
@@ -184,6 +184,14 @@ func (pm *basicManager) updatePodsInternal(pods ...*v1.Pod) {
 			updateMetrics(pm.podByUID[resolvedPodUID], pod)
 			pm.podByUID[resolvedPodUID] = pod
 			pm.podByFullName[podFullName] = pod
+
+			// Slightly cheeky hack to ensure that services can find pods even
+			// if they refer to them using their "api" name, which in the case
+			// of static pods, is different.
+			if kubetypes.IsStaticPod(pod) {
+				pm.podByFullName[kubecontainer.GetPodFullApiName(pod)] = pod
+			}
+
 			if mirror, ok := pm.mirrorPodByFullName[podFullName]; ok {
 				pm.translationByUID[kubetypes.MirrorPodUID(mirror.UID)] = resolvedPodUID
 			}
@@ -284,8 +292,8 @@ func (pm *basicManager) GetOrphanedMirrorPodNames() []string {
 	pm.lock.RLock()
 	defer pm.lock.RUnlock()
 	var podFullNames []string
-	for podFullName := range pm.mirrorPodByFullName {
-		if _, ok := pm.podByFullName[podFullName]; !ok {
+	for podFullName, pod := range pm.mirrorPodByFullName {
+		if _, ok := pm.podByFullName[kubecontainer.GetPodFullName(pod)]; !ok {
 			podFullNames = append(podFullNames, podFullName)
 		}
 	}
@@ -294,7 +302,7 @@ func (pm *basicManager) GetOrphanedMirrorPodNames() []string {
 
 func (pm *basicManager) IsMirrorPodOf(mirrorPod, pod *v1.Pod) bool {
 	// Check name and namespace first.
-	if pod.Name != mirrorPod.Name || pod.Namespace != mirrorPod.Namespace {
+	if kubecontainer.GetPodFullName(pod) != kubecontainer.GetPodFullName(mirrorPod) {
 		return false
 	}
 	hash, ok := getHashFromMirrorPod(mirrorPod)
diff --git a/pkg/kubelet/status/status_manager.go b/pkg/kubelet/status/status_manager.go
index d9aa072a932..6779e455861 100644
--- a/pkg/kubelet/status/status_manager.go
+++ b/pkg/kubelet/status/status_manager.go
@@ -657,6 +657,9 @@ func (m *manager) updateStatusInternal(pod *v1.Pod, status v1.PodStatus, forceUp
 		podNamespace:  pod.Namespace,
 		podIsFinished: podIsFinished,
 	}
+	if kubetypes.IsStaticPod(pod) {
+		newStatus.podName = pod.Annotations[kubetypes.ConfigApiName]
+	}
 
 	// Multiple status updates can be generated before we update the API server,
 	// so we track the time from the first status update until we retire it to
diff --git a/pkg/kubelet/types/pod_update.go b/pkg/kubelet/types/pod_update.go
index 6c7e236fc9a..905c1a02805 100644
--- a/pkg/kubelet/types/pod_update.go
+++ b/pkg/kubelet/types/pod_update.go
@@ -28,6 +28,8 @@ import (
 const (
 	ConfigSourceAnnotationKey    = "kubernetes.io/config.source"
 	ConfigMirrorAnnotationKey    = v1.MirrorPodAnnotationKey
+	ConfigMirrorLocalName        = "kios.redcoat.dev/config.localname"
+	ConfigApiName                = "kios.redcoat.dev/config.apiname"
 	ConfigFirstSeenAnnotationKey = "kubernetes.io/config.seen"
 	ConfigHashAnnotationKey      = "kubernetes.io/config.hash"
 )
-- 
2.42.0

