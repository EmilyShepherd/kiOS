#!/bin/bash
#
# Pre-downloads images to the given location
#
# This is intended to be used to prime containers within a datapart or
# initramfs so that they can be used before networking is setup.
#
# The images to download can either be given explicitly on the command
# line, or one or more manifest directories can be specified. Any images
# specified in the manifests will be pulled.
#

declare -A images

add_image() {
  local image=$1

  # Docker.io has some weird non standard behaviour which most container
  # tools silently take care of. When an image just has a name and no
  # organisation, it is silently re-rewritten to include "library" as
  # the organisation. We need to be aware of this and do that transform
  # so when we check if an image is needed we correctly identify an
  # image.
  if echo -n $image | grep -sq '^docker\.io/[^/]\+$'
  then
    image=$(echo -n $image | sed 's#/#/library/#')
  fi

  images[$image]="y"
}

while ! test -z "$1"
do
  case "$1" in
    "--root" | "-r")
      ROOT="$2"
      shift
      ;;
    "--manifest-dir" | "-m")
      for img in $(grep image: $2/*.yaml | grep -o '\("[^"]\+"\)\|\([^ "]\+$\)' | sed 's/"//g')
      do
        add_image $img
      done
      shift
      ;;
    "--pause" | "-p")
      add_image "registry.k8s.io/pause:$2"
      shift
      ;;
    *)
      add_image $1
      ;;
  esac
  shift
done

podman="podman --root ${ROOT}"

$podman pull --platform=linux/amd64 "${!images[@]}"

is_desired() {
  for name in $@
  do
    if test "${images[$name]}" == "y"
    then
      return 0
    fi
  done

  return 1
}

$podman images \
  --format '{{printf "%s\t" .Id}}{{- range $i := .Names}}{{printf "%s\t" $i}}{{- end}}' | \
  while read id names
  do
    if ! is_desired $names
    then
      $podman rmi -f $id;
    fi
  done


cd "${ROOT}"

rm -rf \
  overlay-containers \
  libpod \
  overlay-layers/*.gz \
  volumes \
  defaultNetworkBackend networks \
  *.lock */*.lock db.sql
