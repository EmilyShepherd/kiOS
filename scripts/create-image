#!/bin/bash
#
# Small script which can used to create an ISO image for a working kiOS
# distribution.
#
# This scripts expects the datapart and bootpart directories to already
# contain all desired files.
#
set -e

DATAPART_TYPE_UUID="97aac693-d920-465a-94fe-eb59fc86dfaa";
BOOTPART_PATH=${EFI_PATH:-.build/bootpart}
DATAPART_PATH=${DATAPART_PATH:-.build/datapart}

#
# Creates a blank zero'd file - useful for padding / pre-priming areas
# of a disk that will contain partition tables.
#
make_blank_part() {
  dd if=/dev/zero of=.iso/$1 bs=512 count=$2
}

#
# Creates the boot partition by checking how big the bootpart directory
# is in 1K blocks, then provisioning a vfat partition that size and
# copying the contents into it.
#
make_boot_part() {
  local efi_size=$(du -B 1024 --max-depth=0 ${BOOTPART_PATH} | cut -f1)
  local boot_blocks=$(expr $efi_size + 70)
  boot_lbas=$(expr $boot_blocks '*' 2)

  mkfs.vfat -C .iso/boot -f1 ${boot_blocks}
  mcopy -si .iso/boot ${BOOTPART_PATH}/* ::
}

#
# Creates the data partition by checking how big the datapart directory
# is in bytes, then provisioning an ext4 partition 1.5 that size, to
# ensure a bit of slack at runtime.
#
make_data_part() {
  local data_size=$(du --max-depth=0 ${DATAPART_PATH} | cut -f1)
  local buffered_size=$(expr ${data_size} '*' 3 / 2)
  mkfs.ext4 -j -d ${DATAPART_PATH} .iso/datapart ${buffered_size}
}

#
# Creates a partition table in the kios.img iso and sets up the two
# partitions.
#
# Args:
#   1 - The code for the type of table "o" for DOS/MBR, "g" for GPT
#   2 - The command to use to create a new partition
#   3 - The type identifier / code for an EFI partition
#   4 - The type identifier / code for a kiOS data partition
#
make_table() {
  local type="$1"
  local new_cmd="$2"
  local efi_type="$3"
  local datapart_type="$4"

  {
    echo "${type}";                 # Create Table

    # Part 1
    echo "${new_cmd}";              # New Partition:
    echo 1;                         #   Part 1
    echo 2048;                      #   Start LBA
    echo +$(expr $boot_lbas - 1);   #   End  LBA
    echo t;                         # Set type:
    echo "${efi_type}";             #   EFI System

    # Part 2
    echo "${new_cmd}";              # New Partition:
    echo 2;                         #   Part 2
    echo $(expr $boot_lbas + 2048); #   Start LBA
    echo -0;                        #   End LBA
    echo t;                         # Set Type:
    echo 2;                         #   Part 2
    echo "${datapart_type}";        #   kiOS Data Partition

    echo w;                         # Write and exit
  } | fdisk kios.img
}

#
# Creates a GPT disk by concatenating together the bootpart and datapart
# files, then creating a GPT table with entries pointing to the correct
# LBAs on the disk.
#
make_gpt_disk() {
  make_blank_part start 2048
  make_blank_part end 33

  cat .iso/start .iso/boot .iso/datapart .iso/end > kios.img

  make_table g n 1 "${DATAPART_TYPE_UUID}"
}

#
# Creates a MBR/DOS disk by concatenating together the bootpart and
# datapart files, then creating a MBR table with two primary partitions
# pointing to the correct LBAs on the disk.
#
make_mbr_disk() {
  make_blank_part start 2048

  cat .iso/start .iso/boot .iso/datapart > kios.img

  make_table o $'n\np' ef 83
}

rm -rf .iso
mkdir -p .iso
make_boot_part
make_data_part

case "$1" in
  --mbr) make_mbr_disk ;;
  *) make_gpt_disk ;;
esac
